{"version":3,"sources":["components/Navbar.js","components/TextFrom.js","components/Alert.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","aboutText","modeText","onClick","toggleMode","htmlFor","enable","TextFrom","useState","text","setText","heading","for","placeholder","value","onChange","event","target","rows","newtext","toUpperCase","showAlert","toLowerCase","arr","split","i","length","charAt","slice","join","document","getElementById","select","navigator","clipboard","writeText","Alert","alert","role","word","lower","capitalized","msg","About","color","backgroundColor","myStyle","setMyStyle","btntext","setbtntext","style","border","class","defaultProps","App","setMode","setModeText","setEnable","setAlert","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6c449c7a.chunk.js","sourcesContent":["import React , {useState} from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className = { `navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} `}>\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          {props.title}\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n          <div className={`form-check form-switch ${props.modeText}`}>\r\n           <input className=\"form-check-input\"  onClick={props.toggleMode}  type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.enable} DarkMode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\n//to set the type of values props should have\r\nNavbar.propTypes =  {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string, \r\n}\r\n\r\n//to set deafult prop if not passed\r\nNavbar.defaultProps = {\r\n    title: \"Set title here\",\r\n    aboutText: \"About Text Here\"\r\n}                \r\n\r\n","import React, { useState } from \"react\";\r\n// import PropTypes from 'prop-types'\r\n\r\nexport default function TextFrom(props) {\r\n  const handleUpClick = () => {\r\n    // console.log(\"Uppercase was clicked\" +text);\r\n    let newtext = text.toUpperCase();\r\n    setText(newtext);\r\n    props.showAlert(\"Converted to Upper Case!\",\"success\");\r\n  };\r\n\r\n  const handleDownClick = () => {\r\n    // console.log(\"Uppercase was clicked\" +text);\r\n    let newtext = text.toLowerCase();\r\n    setText(newtext);\r\n    props.showAlert(\"Converted to Lower Case!\",\"success\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"Handle on change\");\r\n    setText(event.target.value);\r\n  };\r\n  const handleCopy = (event) => {\r\n    let text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Text Copied\",\"success\");\r\n  };\r\n\r\n  const handleCapitalize = (event) => {\r\n    // console.log(\"Handle on change\");\r\n    let text1 = text.toLowerCase();\r\n    const arr = text1.split(\" \");\r\n\r\n    //loop through each element of the array and capitalize the first letter.\r\n\r\n    for (var i = 0; i < arr.length; i++) {\r\n      arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1);\r\n    }\r\n\r\n    //Join all the elements of the array back into a string\r\n    //using a blankspace as a separator\r\n    const newtext = arr.join(\" \");\r\n    setText(newtext);\r\n  };\r\n\r\n  const handleClear = (event) => {\r\n    // console.log(\"Handle on change\");\r\n    setText(\"\");\r\n    props.showAlert(\"Text Cleared!\",\"success\");\r\n  };\r\n\r\n  const handleExtraSpaces = (event) => {\r\n    let newtext = text.split(/[ ]+/);\r\n    setText(newtext.join(\" \"))\r\n  };\r\n\r\n  // Declare a new state variable, which we'll call \"count\"\r\n  const [text, setText] = useState(\"\");\r\n  // setText(\"dfdfdfdfdf\"); //correct way to set a text\r\n\r\n  return (\r\n    <>\r\n      <div className={`my-3 container ${props.modeText}`}>\r\n        <div className=\"mb-3\">\r\n          <h1>{props.heading} </h1>\r\n          <label for=\"myBox\" className=\"form-label\">\r\n            Example TextArea\r\n          </label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            placeholder=\"enter text here\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary\" onClick={handleUpClick}>\r\n          Convert to UpperCase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleDownClick}>\r\n          Convert to LowerCase\r\n        </button>\r\n        <button className=\"btn btn-primary \" onClick={handleClear}>\r\n          Clear Text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleCapitalize}>\r\n          Capitalize Text\r\n        </button>\r\n        <button className=\"btn btn-primary \" onClick={handleCopy}>\r\n          Copy Text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>\r\n          Remove Extra Space\r\n        </button>\r\n      </div>\r\n\r\n      <div className= {`container my-3 ${props.modeText}`}>\r\n        <h2>Your text summary</h2>\r\n        <p>\r\n          {text.split(\" \").length} words , {text.length} characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} Minutes Read</p>\r\n        <h3>Preview</h3>\r\n        <p>{text.length>0?text:\"Enter your Something to preview\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n// //to set the type of values props should have\r\n// TextFrom.propTypes =  {\r\n//     heading: PropTypes.string.isRequired,\r\n// }\r\n\r\n// //to set deafult prop if not passed\r\n// TextFrom.defaultProps = {\r\n//     heading: \"Set heading here\",\r\n\r\n// }\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n    const capitalized = (word) =>{\r\n         const lower  = word.toLowerCase();\r\n         return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n      props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n         <strong>{capitalized(props.alert.type)}</strong> : {props.alert.msg}\r\n        {/* <button\r\n          type=\"button\"\r\n          className=\"btn-close\"\r\n          data-bs-dismiss=\"alert\"\r\n          aria-label=\"Close\"\r\n        ></button> */}\r\n      </div>\r\n  );\r\n}\r\n","import React , {useState} from \"react\";\r\n\r\nexport default function About() {\r\n  const [myStyle , setMyStyle] =  useState({\r\n    color: 'black',\r\n    backgroundColor: 'white'\r\n})\r\n\r\nconst [btntext, setbtntext] = useState(\"Enable dark Mode\")\r\n\r\nconst toggleStyle = () => {\r\n  if(myStyle.color === 'white'){\r\n    setMyStyle({\r\n      color: 'black',\r\n      backgroundColor: 'white',\r\n      border: '1px solid white',\r\n      \r\n  })\r\n  setbtntext(\"Enable dark Mode\")\r\n\r\n  \r\n  }\r\n\r\n  else{\r\n    setMyStyle({\r\n      color: 'white',\r\n      backgroundColor: 'black',\r\n      \r\n  })\r\n  setbtntext(\"Disable dark Mode\")\r\n  }\r\n}\r\n\r\n  return (\r\n    <div className = \"container my-3\" style = {myStyle}>\r\n        <h2>About us</h2>\r\n      <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              style = {myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style = {myStyle}>\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              style = {myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style = {myStyle}>\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              style = {myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style = {myStyle}>\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"container my-2\">\r\n      <button type=\"button\" onClick = {toggleStyle} class=\"btn btn-primary\">{btntext}</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// import logo from './logo.svg';\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport TextFrom from \"./components/TextFrom\";\nimport Alert from \"./components/Alert\";\nimport About from \"./components/About\";\nimport React, { useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\n//let name = \"Harry\";\n//let name1 = \"<b>Harry</b>\"\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [modeText, setModeText] = useState(\"text-dark\");\n  const [enable, setEnable] = useState(\"Enable\");\n  const [alert, setAlert] = useState(null);\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      setModeText(\"text-light\");\n      setEnable(\"Disable\");\n      document.body.style.backgroundColor = \"grey\";\n      showAlert(\"Dark Mode has been Enabled\", \"success\");\n      document.title = \"TextUtils - DarkMode\";\n      // setInterval(() => {\n      //   document.title = \"TextUtils is Amazing!!\";\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = \"Install TextUtils Now.\";\n      // }, 1500);\n    } else {\n      setMode(\"light\");\n      setModeText(\"text-dark\");\n      setEnable(\"Enable\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode has been Enabled\", \"success\");\n      document.title = \"TextUtils - LightMode\";\n    }\n  };\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  return (\n    // <>\n    // <h1>Hello</h1>\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.js</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React with Archi\n    //     </a>\n    //   </header>\n    // </div>\n    // </>\n\n    // <>\n    //  <nav>\n    //    <li>Home</li>\n    //    <li>About</li>\n    //    <li>Contact</li>\n    //    <li>Services</li>\n    //  </nav>\n    //  <div className=\"container\">\n    //    <h1>Hello {name1}</h1>\n    //    <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Est qui necessitatibus commodi sint consectetur, nobis doloremque. Molestias, atque facilis dolore debitis id non laborum perspiciatis earum obcaecati ipsam ad cum.</p>\n    //  </div>\n    // </>\n\n    <>\n      {/* <Navbar /> */}\n      <Router>\n      <Navbar\n        title=\"TextUtils\"\n        aboutText=\"AboutUs\"\n        mode={mode}\n        toggleMode={toggleMode}\n        modeText={modeText}\n        enable={enable}\n      />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n            <TextFrom\n              showAlert={showAlert}\n              heading=\"Enter your text\"\n              modeText={modeText}\n            />\n          </Route>\n        </Switch>\n      </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}